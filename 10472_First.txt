/*
	10472_십자뒤집기
	
	BFS 탐색과 비트마스크, 반전을 이용하여 해결하는 문제이다.
	비트마스크, 반전, BFS를 더 아름답게 할 수 있는지 다른 분들의 소스 분석이 필요하다.
	First 
*/
#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

int prec[9][6] = { {3, 8, 7, 5}, {4, 8, 7, 6, 4}, {3, 6, 7, 3}, {4, 8, 5, 4, 2}, {5, 7, 5, 4, 3, 1}, {4, 6, 4, 3, 0}, 
		{3, 5, 2, 1}, {4, 4, 2, 1, 0}, {3, 3, 1, 0} };
int chk[512];
char a[5][5];
int END;
int convert(vector <string> &R) {
	int ret = 0;
	for(int i = 0; i<3; i++){
		for(int j = 0; j<3; j++){
			ret *= 2;
			ret += (R[i][j] == '*');
		}
	}
	return ret;
}
int main() {
	vector <string> a(3);
	int testcase;
	scanf("%d", &testcase);
	while(testcase--) {
		for(int i = 0; i<3; i++) cin >> a[i];
		END = convert(a);	
		queue <pair<int, int>> Q;
		Q.push(make_pair(0, 0));
		for(int i = 0; i<=512; i++) chk[i] = 0;
		chk[0] = 1;
		while(!Q.empty()) {
			int now = Q.front().first;
			int cnt = Q.front().second;
			Q.pop();
			if(now == END) {
				printf("%d\n", cnt);
				break;
			}
			for(int i = 0; i<9; i++){
				int key = now;
				for(int j = 1; j<=prec[i][0]; j++){
					key ^= (1 << prec[i][j]);
				}
				if(!chk[key]) {
					chk[key] = 1;
					Q.push(make_pair(key, cnt+1));
				}
			}
		}
	}
	return 0;
}